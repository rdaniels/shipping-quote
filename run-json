#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('./lib', __FILE__)
require './lib/shipping-quote'
require 'pry'
require 'json'
config = YAML::load(IO.read("./shipping-quote-delphi.yml"))


destination = {"province"=>"FL",
           "country"=>"US",
           "postal_code"=>33609,
           "city"=>"Tampa",
           "street"=>"1234 fake street",
           "street2"=>""}
cart_items = [{"shipCode"=>"UPS",
            "glassConverter"=>"",
            "weight"=>1,
            "qty"=>1,
            "ref01"=>3000,
            "backorder"=>0,
            "ormd"=>"",
            "freeShipping"=>2,
            "isGlass"=>""},
           {"shipCode"=>"UPS",
            "glassConverter"=>"",
            "weight"=>5,
            "qty"=>1,
            "ref01"=>"ab123",
            "backorder"=>0,
            "ormd"=>"",
            "freeShipping"=>0,
            "isGlass"=>""}]

class Hashit
  def initialize(hash)
    hash.each do |k,v|
      self.instance_variable_set("@#{k}", v)  ## create and initialize an instance variable for this key/value pair
      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})  ## create the getter that returns the instance variable
      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})  ## create the setter that sets the instance variable
    end
  end
end


#d_hash = Hashit.new(destination)
c_hash = []
cart_items.each {|item| c_hash << Hashit.new(item) }
d_symbol = destination.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

ship = ShippingQuote::Shipping.new(c_hash, config)
results = ship.runner(d_symbol)

puts results
#puts ship.packages.length
#puts ship.packages[0]


#puts ship.lead_packages(cart_items)
#puts ship.packages

#packages = ship.create_packages
#quote = ship.quotes(destination,packages)
#puts quote

#ship = ShippingQuote::Shipping.new(cart_items, config)

#ship.create_packages
#box = ship.boxing_charge
#puts box

#ship = RLQuote.new(cart_items, config)
#ship_class = ship.get_weight
#puts ship_class

#quote = ship::RLQuote.freight_request(destination)
#puts quote

#xml_in = ship.rate_estimate(destination)


#to = config[:sm_per_box].to_d + 1
#(0..to).each { |i| cart_items[i] = item }
#puts cart_items
#results = ship.create_packages

#results = ship.runner(destination)
#puts results
#has_express = quote.select{|key, value| key.to_s.match(/^FedEx Express Saver/)}




#quotes = ship.quotes(destination,packages)
#truck_only = ship.truck_only
#puts truck_only
#packages = ship.create_packages
#quotes = ship.quotes(destination,packages)
#puts results = ship.filter_shipping(quotes, nil, nil, truck_only)
